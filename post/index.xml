<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Go Lad News</title>
    <link>http://anlhord.github.io/post/</link>
    <description>Recent content in Posts on Go Lad News</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
    
    <lastBuildDate>Thu, 22 Jan 2015 20:56:26 CET</lastBuildDate>
    <atom:link href="http://anlhord.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Short review of irelate</title>
      <link>http://anlhord.github.io/post/irelate_review/</link>
      <pubDate>Thu, 22 Jan 2015 20:56:26 CET</pubDate>
      
      <guid>http://anlhord.github.io/post/irelate_review/</guid>
      <description>&lt;p&gt;reviewing article
the author of the article brentp has used go for bioinformatics. Used vim-go, closure as iterators etc. The project can
be found at &lt;a href=&#34;https://github.com/brentp/irelate&#34;&gt;https://github.com/brentp/irelate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing that interested me is how separate (sorted) data-sources are merged into a single stream.&lt;/p&gt;

&lt;p&gt;The merge is in /irelate.go&lt;/p&gt;

&lt;p&gt;It first loads an interval from each stream. It sets an id of source (the # of stream).
Then it pushes these objects to the heap.
Then it makes the channel of relatable with capacity of 8.&lt;/p&gt;

&lt;p&gt;It then pops iterval,  pushes new interval to the tiny heap from the same channel and sends the intervals together
with the source down the output channel.&lt;/p&gt;

&lt;p&gt;This works because the intervals on each channel are already sorted.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating a google app engine aerospike application</title>
      <link>http://anlhord.github.io/post/webapp/</link>
      <pubDate>Wed, 21 Jan 2015 20:56:26 CET</pubDate>
      
      <guid>http://anlhord.github.io/post/webapp/</guid>
      <description>

&lt;p&gt;So I&amp;rsquo;ve registered for a google app engine trial.&lt;/p&gt;

&lt;p&gt;I found this database called aerospike. Decided to give it a go.&lt;/p&gt;

&lt;p&gt;Now I&amp;rsquo;ve decided to push some basic pages and redirect the dns.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve created a git repository.&lt;/p&gt;

&lt;p&gt;Installed the google cloud sdk by using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl https://sdk.cloud.google.com | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Authenticate to Google Cloud Platform by running gcloud auth login.&lt;/p&gt;

&lt;p&gt;cloned the git repo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package hello

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;
)

func init() {
    http.HandleFunc(&amp;quot;/&amp;quot;, handler)
}

func handler(w http.ResponseWriter, r *http.Request) {
    fmt.Fprint(w, &amp;quot;Hello, world!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;created the basic app.yaml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;application: *xxxxx*
version: 1
runtime: go
api_version: go1

handlers:
- url: /.*
  script: _go_app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;put the app to the default/ folder.&lt;/p&gt;

&lt;p&gt;also downloaded the appengine sdk.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;goapp serve
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;worked. Then ran&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;goapp deploy -oauth
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;setting-up-dns:e26d0c0afc9804b9baddb71e41688447&#34;&gt;setting up dns&lt;/h1&gt;

&lt;p&gt;compute -&amp;gt; go app engine -&amp;gt; settings&lt;/p&gt;

&lt;p&gt;after creating the TXT record the google picked it up.&lt;/p&gt;

&lt;p&gt;adding a qa CNAME and picked up instantly.&lt;/p&gt;

&lt;h1 id=&#34;fun-with-aerospike:e26d0c0afc9804b9baddb71e41688447&#34;&gt;Fun with aerospike.&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://lynnlangit.com/2014/06/24/how-to-installing-aerospikedb-on-google-compute-engine/&#34;&gt;this blog post has the setup guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our main goal is to funnel the queries from the front page to the aerospike
database. The struct will be ID, question, price, asker, sol id, sol bool&lt;/p&gt;

&lt;p&gt;The aerospike deployed by click to deploy. It also provides the tunnel option
to the amc (aerospike management console). Then connect via &lt;a href=&#34;http://localhost:8081/&#34;&gt;http://localhost:8081/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Created a namespace called qa&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;appcfg.py --oauth2 rollback .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On app engine this call fails:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	c, e = aerodb.NewCluster(aerodb.NewClientPolicy(), h...)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;there&amp;rsquo;s a language called aql. but we will use the cli directly.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cli -n qa -s q -o set -k &amp;quot;best blog&amp;quot; -b pay -v 10
cli -n qa -s q -o set -k &amp;quot;best blog&amp;quot; -b asker -v 0
cli -n qa -s a -o set -k  -b asker -v &amp;quot;http://go.lad.nu/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was my aerospike configuration&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace foooo {
        replication-factor 2
        memory-size 4G

	high-water-memory-pct 60
	high-water-disk-pct 50
	stop-writes-pct 90

        default-ttl 0 # 30 days, use 0 to never expire/evict.


        ldt-enabled true

        storage-engine device {
               file /opt/aerospike/data/qa.dat
               filesize 16G
               # See http://discuss.aerospike.com/t/aerospike-doesnt-work-with-local-ssd-disks-at-gce/497/4
               disable-odirect true
               data-in-memory true # Store data in memory in addition to fil
       }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ve killed the aerospike cluster, so the above snipped is in case i need it later.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Package requires Go 1.2</title>
      <link>http://anlhord.github.io/post/goversion_dep/</link>
      <pubDate>Tue, 20 Jan 2015 20:56:26 CET</pubDate>
      
      <guid>http://anlhord.github.io/post/goversion_dep/</guid>
      <description>&lt;p&gt;You can negate build tags by prefixing with !. For instance, to support go1.2 and up, move the specific code to a file, and add this to the top:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// +build go1.2

package irc
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in another file, write the code that should only build with versions lower than go1.2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// +build !go1.2

package irc
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I tested this with go versions 1.4 and 1.1, albeit a very simple one :) Hope this helps!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating a google app engine aerospike application</title>
      <link>http://anlhord.github.io/post/golang_template/</link>
      <pubDate>Mon, 19 Jan 2015 20:56:26 CET</pubDate>
      
      <guid>http://anlhord.github.io/post/golang_template/</guid>
      <description>&lt;p&gt;We can try redering some html/template with our app.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/doc/articles/wiki/#tmp_6&#34;&gt;Writing Web Applications.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, we must add html/template to the list of imports.&lt;/p&gt;

&lt;p&gt;Setting up templating was done by this function:&lt;/p&gt;

&lt;p&gt;This is how to serve a static content from the google app engine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;handlers:
- url: /assets
  static_dir: static

- url: /.*
  script: _go_app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We serve stuff from the directory &lt;em&gt;static&lt;/em&gt; to the url &lt;a href=&#34;http://example.com/assets/img/x.png&#34;&gt;http://example.com/assets/img/x.png&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On google app engine onecan deploy in a very simple&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;goapp deploy -oauth
appcfg.py --oauth2 rollback .
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Timing a function using defer</title>
      <link>http://anlhord.github.io/post/timing_a_function/</link>
      <pubDate>Sun, 18 Jan 2015 20:56:26 CET</pubDate>
      
      <guid>http://anlhord.github.io/post/timing_a_function/</guid>
      <description>&lt;p&gt;Timing a function using defer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func timed(start time.Time, name string) {
elapsed := time.Since(start)
log.Printff(&amp;quot;%s took %s&amp;quot;, name, elapsed)
}

and later:

func myfunction () {
defer timed(time.Now(), &amp;quot;myfunction&amp;quot;)
...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you can use this feature to dump runtime statistics :-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Workaround insanities in go stdlib and go 2.0 wishlist</title>
      <link>http://anlhord.github.io/post/working_around_insanities_in_the_go_stdlib_and_missing_features_of_the_language/</link>
      <pubDate>Sun, 18 Jan 2015 20:56:26 CET</pubDate>
      
      <guid>http://anlhord.github.io/post/working_around_insanities_in_the_go_stdlib_and_missing_features_of_the_language/</guid>
      <description>

&lt;h2 id=&#34;less-really-https-github-com-golang-go-blob-master-src-sort-sort-go:db0517e22a155f8c4876f9ca184f707d&#34;&gt;&lt;a href=&#34;https://github.com/golang/go/blob/master/src/sort/sort.go&#34;&gt;less? really?&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;// Package sort provides primitives for sorting slices and user-defined
// collections.
package sort
// A type, typically a collection, that satisfies sort.Interface can be
// sorted by the routines in this package. The methods require that the
// elements of the collection be enumerated by an integer index.
type Interface interface {
// Len is the number of elements in the collection.
Len() int
// Less reports whether the element with
// index i should sort before the element with index j.
Less(i, j int) bool
// Swap swaps the elements with indexes i and j.
Swap(i, j int)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;since almost forever, &lt;strong&gt;comparisons are done by substracting the elements&lt;/strong&gt;. then
you compare the int with zero. this is the case in the
&lt;a href=&#34;http://www.cplusplus.com/reference/cstdlib/qsort/&#34;&gt;c standard library&lt;/a&gt;
and pretty much everywhere else.&lt;/p&gt;

&lt;p&gt;The choice of less is really unfortunate and leads to &lt;a href=&#34;https://github.com/golang/go/blob/master/src/sort/sort.go#L137&#34;&gt;a really stupid double less to check for equality pattern&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	for b &amp;lt; c {
if data.Less(pivot, c-1) { // data[c-1] &amp;gt; pivot
c--
} else if !data.Less(c-1, pivot) { // data[c-1] = pivot
data.Swap(c-1, d-1)
c--
d--
} else {
break
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The boolean itself is &lt;strong&gt;a sign that you&amp;rsquo;re doing something wrong&lt;/strong&gt;, in fact
using byte or int stead of a boolean everywhere is the best thing you can do.
Internally a boolean is a byte anyway.&lt;/p&gt;

&lt;h2 id=&#34;misuse-of-duck-typing-for-everything:db0517e22a155f8c4876f9ca184f707d&#34;&gt;misuse of duck typing for everything.&lt;/h2&gt;

&lt;p&gt;When you see an interface with methods like len, at, swap. Take a guess what
type would implement this.&lt;/p&gt;

&lt;p&gt;99% of things implementing this interface are going to be slices. So we when
some procedure takes this interface its in fact meant to be used for slices.&lt;/p&gt;

&lt;p&gt;Sadly go has no built in support for a safe void* pointer.&lt;/p&gt;

&lt;h2 id=&#34;slow-sorting-in-stdlib:db0517e22a155f8c4876f9ca184f707d&#34;&gt;slow sorting in stdlib&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/23276417/golang-custom-sort-is-faster-than-native-sort&#34;&gt;people have noticed&lt;/a&gt;
that an interface dispatch is not the best thing to do in a tight loop. so we would like to have a buillt-in mechanism for this. the mechanism to do this corectly is actually possible and nice, but it needs a change in the go language. so it the current way of doing  doing this in the stdlib is not terribly bad. the bolierplate of len, swap, at methods is actually the bad thing about it.&lt;/p&gt;

&lt;h2 id=&#34;so-we-break-the-type-system:db0517e22a155f8c4876f9ca184f707d&#34;&gt;so we break the type system&lt;/h2&gt;

&lt;p&gt;The best way currently to break the go type system &lt;a href=&#34;https://github.com/gomacro/sort/blob/master/unsafe/quick/quick.go#L21&#34;&gt;is as follows&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func mvetype(dst, src *interface{}) {
*(*uintptr)(unsafe.Pointer(dst)) = *(*uintptr)(unsafe.Pointer(src))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function moves the type pointer from the intended type to the variable a type needs to be changed.
The eface object (interface{}) is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Eface
   195	{
   196		Type*	type;
   197		void*	data;
   198	};

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We swapped the Type pointer from the slice of the wanted type ([]uint8) to a slice of arbitrary type []foo.
We cast the eface to unsafe pointer, then we copy the pointer to another eface.
this is best used to turn object dst to type of object src.
it is nice to use this to turn a function getting pointers of any type to accepting pointers of any other type.&lt;/p&gt;

&lt;p&gt;in the maccro library project, we&amp;rsquo;ve implemented the maccro library approach. we &amp;rsquo;re using this eface trick to interface with existing go code until (if ever) go language expressiveness improves.&lt;/p&gt;

&lt;h2 id=&#34;reflection:db0517e22a155f8c4876f9ca184f707d&#34;&gt;reflection&lt;/h2&gt;

&lt;p&gt;the only good things about reflection is the low performance and ugly syntax, to discourage people from using it unless absolutely necessarey and leads to a better code quality overall.
in maccro library project we use it minimally and mainly the slice heasder struct.&lt;/p&gt;

&lt;h2 id=&#34;can-we-do-better:db0517e22a155f8c4876f9ca184f707d&#34;&gt;can we do better?&lt;/h2&gt;

&lt;p&gt;we can&amp;rsquo;t do worse! the go macro library is the result. It has &lt;a href=&#34;https://github.com/gomacro/compare&#34;&gt;sane compare functions
for go builtin types&lt;/a&gt;, &lt;a href=&#34;https://github.com/gomacro/sort&#34;&gt;the sorting&lt;/a&gt; is actually fast, etc.&lt;/p&gt;

&lt;h2 id=&#34;go-2-0-wish-list:db0517e22a155f8c4876f9ca184f707d&#34;&gt;go 2.0 wish list.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;safe void pointer andvoid slice.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;strided slice.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the need for strided slice comes up here and there. the currently standard
way to impplement it is to pass stride int along with a slice.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>My favorite features of go</title>
      <link>http://anlhord.github.io/post/my_favourite_features_of_go/</link>
      <pubDate>Sat, 17 Jan 2015 20:56:26 CET</pubDate>
      
      <guid>http://anlhord.github.io/post/my_favourite_features_of_go/</guid>
      <description>&lt;p&gt;My favorite features of go:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;design of the language&lt;/li&gt;
&lt;li&gt;built-in maps&lt;/li&gt;
&lt;li&gt;the go keyword.&lt;/li&gt;
&lt;li&gt;closures.&lt;/li&gt;
&lt;li&gt;the receiver.&lt;/li&gt;
&lt;li&gt;use of return valuses instead of pointer arguments&lt;/li&gt;
&lt;li&gt;the error type&lt;/li&gt;
&lt;li&gt;panic&lt;/li&gt;
&lt;li&gt;the tests and benchmarks&lt;/li&gt;
&lt;li&gt;profiling.&lt;/li&gt;
&lt;li&gt;coverage testing.&lt;/li&gt;
&lt;li&gt;sane integer covertions and sizes, overflows&lt;/li&gt;
&lt;li&gt;slices&lt;/li&gt;
&lt;li&gt;good standard library&lt;/li&gt;
&lt;li&gt;attempting to be a safe language&lt;/li&gt;
&lt;li&gt;absence of junk

&lt;ul&gt;
&lt;li&gt;( exceptoons, weird syntax, weird symbols)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Things to get used to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;coding style&lt;/li&gt;
&lt;li&gt;capital&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go annoyances&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;missing package&lt;/li&gt;
&lt;li&gt;unused variable

&lt;ul&gt;
&lt;li&gt;( solution is simple, fix the compiler, fix code on commit.)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;the casts

&lt;ul&gt;
&lt;li&gt;are annoying but for a good reason-makes people think twice before using anything else than an int.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;annoying type system

&lt;ul&gt;
&lt;li&gt;solution: break it. currently best way is the eface trick.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>